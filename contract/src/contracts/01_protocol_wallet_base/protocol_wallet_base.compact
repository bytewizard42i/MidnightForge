import CompactStandardLibrary;

/*
 * =============================================================================
 * Circuit: public_key
 * -----------------------------------------------------------------------------
 * Derives a deterministic, on-chain public key from:
 *   • `seed` – a Field value (e.g., the current global counter) used for entropy
 *   • `sk`   – the 32-byte secret key provided at deploy time
 *
 * This helper uses Compact’s `persistent_hash` primitive over a 3-element vector:
 *   1. A fixed 32-byte namespace tag to avoid hash collisions across protocols
 *   2. The seed, cast to Bytes<32>, ensuring uniqueness per deployment or call
 *   3. The raw secret key bytes, tying the result to the owner’s private key
 *
 * By hashing these together, we get a unique, reproducible `Bytes<32>` public key
 * that can be used for signature verification in other circuits.
 * =============================================================================
 */
export circuit public_key(seed: Field, sk: Bytes<32>): Bytes<32> {
    // Build the input vector for hashing:
    //   pad(32, "...") creates a 32-byte tag "midnight:protocol:wallet:pk"
    //   seed as Bytes<32> casts our Field entropy to 32 bytes
    //   sk is already Bytes<32>, our secret key
    let inputs = Vector<3, Bytes<32>>([
        pad(32, "midnight:protocol:wallet:pk"),
        seed as Bytes<32>,
        sk
    ]);

    // persistent_hash compresses the 3-element vector into a 32-byte digest
    return persistent_hash(inputs);
}

// --------------------
// === Ledger State ===
// --------------------

// `ownerKey`
//   Stores the on-chain public key of the wallet owner.
//   Used by other circuits to verify that only the owner can perform
//   privileged operations (folder creation, issuer management, etc.).
export ledger ownerKey: Bytes<32>;

// `globalCounter`
//   A general-purpose, on-chain counter.
//   • Provides entropy for key derivation (as seed in public_key).
//   • Serves upper layers for generating unique IDs (folders, NFTs, etc.).
//   • Auto-initialized to zero by Compact; no explicit reset needed.
export ledger globalCounter: Counter;

// ------------------------
// === Constructor ===
// ------------------------

constructor(sk: Bytes<32>) {
    /*
     * At deployment:
     * 1. `globalCounter` is at its default value (0).
     * 2. We derive `ownerKey` by calling our public_key helper
     *    using the current counter (0) and the provided secret key.
     * 3. This binds the on-chain ownerKey to the deployer’s secret.
     */
    ownerKey = public_key(globalCounter, sk);

    // Note: We do not manually set `globalCounter` here because
    // Compact counters default to zero automatically.
}

// ------------------------
// === Basic Circuits ===
// ------------------------

/*
 * export circuit: getOwnerKey
 * ----------------------------
 * Exposes the stored owner’s public key for off-chain clients.
 * Clients can use this value to verify signatures or ZK proofs
 * produced by the owner.
 */
export circuit getOwnerKey(): Bytes<32> {
    return ownerKey;
}

/*
 * export circuit: incrementCounter
 * --------------------------------
 * Atomically increases `globalCounter` by exactly 1.
 * Returns the new counter value (as a Field) for use as:
 *   • Entropy seeds in subsequent calls
 *   • Unique identifiers in higher-level contracts
 */
export circuit incrementCounter(): Field {
    // Add 1 to the counter in place
    globalCounter += 1;
    // Return the updated counter value
    return globalCounter;
}

/*
 * export circuit: getCounter
 * --------------------------
 * Reads (without modifying) the current value of `globalCounter`.
 * Useful for off-chain queries or nested proof logic that
 * depends on the latest counter state.
 */
export circuit getCounter(): Field {
    return globalCounter;
}
