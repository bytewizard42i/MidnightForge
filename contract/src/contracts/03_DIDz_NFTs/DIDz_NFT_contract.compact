// File: /home/js/utils_Midnight/MidnightForge/contract/src/contracts/03_DIDz_NFTs/DIDz_NFT_contract.compact
// Purpose: Core DIDz NFT contract for MidnightForge.
//          Manages minting and ownership tracking of DIDz NFTs.

import CompactStandardLibrary;                                            // Core Compact primitives
import "../01_protocol_wallet_base/protocol_wallet_base.compact" prefix base; // Base primitives: ownerKey & counter

// ----------------------------------------
// === Types & Enums ===
// ----------------------------------------

// DID represents a Decentralized Identifier, typically a 32-byte hash.
struct DID { bytes: Bytes<32>; }

// NFTMetadataHash represents a hash of the NFT's metadata.
struct NFTMetadataHash { bytes: Bytes<32>; }

// ----------------------------------------
// === Ledger State ===
// ----------------------------------------

/*
 * didzNFTs:
 *   Map< Field (nftId) → DID (ownerDID) >
 *   Stores the DID of the owner for each minted DIDz NFT.
 */
export ledger didzNFTs: Map<Field, DID>;

/*
 * nftMetadata:
 *   Map< Field (nftId) → NFTMetadataHash (metadataHash) >
 *   Stores the hash of the metadata associated with each DIDz NFT.
 */
export ledger nftMetadata: Map<Field, NFTMetadataHash>;

/*
 * nftCounter:
 *   A Counter that auto-increments to allocate unique DIDz NFT IDs.
 *   Defaults to zero at deployment.
 */
export ledger nftCounter: Counter;

// ----------------------------------------
// === Constructor ===
// ----------------------------------------

constructor() {
    // No explicit init required: nftCounter starts at 0, maps are empty by default.
}

// ----------------------------------------
// === Circuit: mintDIDzNFT() ===
// ----------------------------------------

/*
 * export circuit mintDIDzNFT
 * -----------------------------------------------------------------------
 * Mints a new DIDz NFT and assigns it to a recipient DID.
 *   1. Builds a domain-separated message for signing.
 *   2. Verifies the issuer's signature over that message.
 *      (For simplicity, currently uses the contract owner as the issuer).
 *   3. Increments nftCounter to obtain a new unique nftId.
 *   4. Stores the recipient DID and metadata hash for the new nftId.
 *   5. Returns the new nftId.
 *
 * Params:
 *   recipientDID     – The Decentralized Identifier (DID) of the NFT recipient.
 *   metadataHash     – The cryptographic hash of the NFT's metadata.
 *   issuerSignature  – A signature by the authorized issuer over the minting message.
 *
 * Returns:
 *   Field (the assigned unique nftId)
 */
export circuit mintDIDzNFT(
    recipientDID: DID,
    metadataHash: NFTMetadataHash,
    issuerSignature: Bytes<64>
): Field {
    // 1) Domain-separated message to sign
    const msg = persistent_hash<Vector<3, Bytes<32>>>([
        pad(32, "midnight:didz:mintNFT"),
        recipientDID.bytes,
        metadataHash.bytes
    ]);

    // 2) Verify that only the contract owner (acting as a simple issuer for now) can mint NFTs
    assert verifySignature(base.getOwnerKey(), issuerSignature, msg)
        "ERR_SIG: invalid mintDIDzNFT signature";

    // 3) Allocate a new NFT ID
    nftCounter.increment(1);
    const newId = nftCounter.read() as Field;

    // 4) Record the NFT's owner and metadata hash
    didzNFTs.insert(newId, recipientDID);
    nftMetadata.insert(newId, metadataHash);

    return newId;
}

// ----------------------------------------
// === Circuit: getDIDzNFTOwner() ===
// ----------------------------------------

/*
 * export circuit getDIDzNFTOwner
 * -----------------------------------------------------------------------
 * Public view: returns the DID of the owner for a given nftId.
 *
 * Params:
 *   nftId – Field identifier of the DIDz NFT.
 *
 * Returns:
 *   DID – The Decentralized Identifier (DID) of the NFT owner.
 */
export circuit getDIDzNFTOwner(nftId: Field): DID {
    return didzNFTs.lookup(nftId);
}

// ----------------------------------------
// === Circuit: getDIDzNFTMetadataHash() ===
// ----------------------------------------

/*
 * export circuit getDIDzNFTMetadataHash
 * -----------------------------------------------------------------------
 * Public view: returns the metadata hash for a given nftId.
 *
 * Params:
 *   nftId – Field identifier of the DIDz NFT.
 *
 * Returns:
 *   NFTMetadataHash – The cryptographic hash of the NFT's metadata.
 */
export circuit getDIDzNFTMetadataHash(nftId: Field): NFTMetadataHash {
    return nftMetadata.lookup(nftId);
}