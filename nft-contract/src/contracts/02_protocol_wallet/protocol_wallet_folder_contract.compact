// ================================================================================
// File: contracts/02_protocol_wallet/folder_contract.compact
// Purpose: Defines the per-folder smart contract for MidnightForge’s protocol wallet.
//          Manages folder metadata and enforces fine-grained permissions.
// ================================================================================

import CompactStandardLibrary;          // Core Compact library for primitives
import "./protocol_wallet.compact";     // Imports PermissionLevel enum and base interfaces

// ----------------------------------------
// === Ledger State (Persistent Storage) ===
// ----------------------------------------

/*
 * folderId
 *   - A unique numeric identifier for this folder.
 *   - Assigned by the root protocol_wallet when deploying.
 */
export ledger folderId: UInt;

/*
 * folderMetadata
 *   - A 64-byte field for storing human-readable folder info (e.g., name, description).
 *   - Can store JSON or an encrypted blob, as long as it fits 64 bytes.
 */
export ledger folderMetadata: Bytes<64>;

/*
 * permissions
 *   - Maps each user’s public key (Bytes<32>) to their PermissionLevel in this folder.
 *   - PermissionLevel is imported from protocol_wallet.compact:
 *       • None       – no access
 *       • Reader     – read-only
 *       • Contributor– can submit proposals
 *       • Admin      – can manage members
 *       • Owner      – full control
 */
export ledger permissions: Map<Bytes<32>, PermissionLevel>;

// ------------------------
// === Constructor Logic ===
// ------------------------

constructor(id: UInt, metadata: Bytes<64>) {
    /*
     * Called by protocol_wallet.createFolder().
     * 1. Store the assigned folder ID.
     * 2. Store the initial metadata blob.
     * 3. Grant Owner permission to the wallet’s ownerKey.
     */
    folderId = id;
    folderMetadata = metadata;

    // Fetch the on-chain owner key from the base contract
    let rootOwner = base.getOwnerKey();

    // Initialize permissions: root owner is the folder Owner
    permissions.set(rootOwner, PermissionLevel.Owner);
}

// -------------------------------------
// === Circuit: grantPermission() ===
// -------------------------------------

/*
 * export circuit: grantPermission
 * -------------------------------------------------
 * Allows an Admin or Owner to grant a specific PermissionLevel
 * to another userKey within this folder.
 *
 * Parameters:
 *   userKey   – the Bytes<32> public key of the user to grant access
 *   level     – the PermissionLevel to assign (None, Reader, Contributor, Admin, Owner)
 *   callerKey – the Bytes<32> public key of the caller (must match signature)
 *   signature – a 64-byte signature over the “grant” message
 *
 * Workflow:
 *   1. Construct a unique message that ties:
 *        • the action (“grant”)
 *        • this folder’s ID
 *        • the target userKey
 *   2. Verify the signature against callerKey.
 *   3. Fetch caller’s existing PermissionLevel.
 *   4. Ensure caller is Owner or Admin.
 *   5. Update permissions for userKey.
 */
export circuit grantPermission(
    userKey: Bytes<32>,
    level: PermissionLevel,
    callerKey: Bytes<32>,
    signature: Bytes<64>
) {
    // 1) Build the signed message to prevent replay attacks
    let msg = persistent_hash<Vector<3, Bytes<32>>>([
        pad(32, "midnight:folder:grant"),    // 32-byte namespace tag
        folderId as Bytes<32>,               // cast UInt → Bytes<32>
        userKey                              // recipient’s key
    ]);

    // 2) Verify signature: only key holder can call
    assert verifySignature(callerKey, signature, msg)
        "ERR_SIG: invalid grant signature";

    // 3) Check caller’s current permission
    let callerPerm = permissions.get(callerKey);
    assert callerPerm != PermissionLevel.None
        "ERR_PERM: caller has no permissions";

    assert (callerPerm == PermissionLevel.Owner ||
            callerPerm == PermissionLevel.Admin)
        "ERR_PERM: insufficient permissions to grant";

    // 4) Assign the new permission level
    permissions.set(userKey, level);
}

// --------------------------------------
// === Circuit: revokePermission() ===
// --------------------------------------

/*
 * export circuit: revokePermission
 * -------------------------------------------------
 * Allows an Admin or Owner to revoke all permissions
 * from a specific userKey within this folder.
 *
 * Parameters:
 *   userKey   – the Bytes<32> public key of the user to revoke
 *   callerKey – the Bytes<32> public key of the caller
 *   signature – a 64-byte signature over the “revoke” message
 *
 * Workflow mirrors grantPermission, but sets level to None.
 */
export circuit revokePermission(
    userKey: Bytes<32>,
    callerKey: Bytes<32>,
    signature: Bytes<64>
) {
    // 1) Build unique revoke message
    let msg = persistent_hash<Vector<3, Bytes<32>>>([
        pad(32, "midnight:folder:revoke"),
        folderId as Bytes<32>,
        userKey
    ]);

    // 2) Verify caller’s signature
    assert verifySignature(callerKey, signature, msg)
        "ERR_SIG: invalid revoke signature";

    // 3) Ensure caller has rights
    let callerPerm = permissions.get(callerKey);
    assert callerPerm != PermissionLevel.None
        "ERR_PERM: caller has no permissions";

    assert (callerPerm == PermissionLevel.Owner ||
            callerPerm == PermissionLevel.Admin)
        "ERR_PERM: insufficient permissions to revoke";

    // 4) Remove the user’s permissions
    permissions.set(userKey, PermissionLevel.None);
}

// ------------------------------------
// === Circuit: getPermission() ===
// ------------------------------------

/*
 * export circuit: getPermission
 * -----------------------------
 * Public read-only circuit.
 * Returns the PermissionLevel for a given userKey.
 *
 * Parameters:
 *   userKey – Bytes<32> of the user whose permissions to query.
 *
 * No signature needed; this is a public view.
 */
export circuit getPermission(userKey: Bytes<32>): PermissionLevel {
    return permissions.get(userKey);
}
/*
Explanation & Interactions:

Ledger Variables persist across calls and store all folder state.

Constructor sets up the folder and grants the deployer Owner rights.

grantPermission/revokePermission use context-bound messages (persistent_hash) to ensure signatures can’t be replayed for other users or actions.

Permission checks enforce that only high-level roles (Owner/Admin) can modify access.

getPermission allows any caller to inspect a user’s access level for UI or off-chain logic.

This full “Section 2” (folder_contract.compact) is now ready to slot into contracts/02_protocol_wallet/. Let me know if you’d like further edits or additional folder-level circuits!
/